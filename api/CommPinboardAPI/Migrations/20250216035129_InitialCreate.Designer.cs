// <auto-generated />
using System;
using CommPinboardAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommPinboardAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250216035129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommPinboardAPI.Entities.Comment", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalId");

                    b.HasIndex("PostExternalId");

                    b.HasIndex("UserExternalId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.PinnedPost", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PinnedPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinnedPostId"));

                    b.Property<Guid>("PostExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalId");

                    b.HasIndex("PostExternalId");

                    b.HasIndex("UserExternalId");

                    b.ToTable("PinnedPosts");
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.Post", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalId");

                    b.HasIndex("UserExternalId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.User", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ExternalId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.Comment", b =>
                {
                    b.HasOne("CommPinboardAPI.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostExternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommPinboardAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserExternalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.PinnedPost", b =>
                {
                    b.HasOne("CommPinboardAPI.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostExternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommPinboardAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserExternalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CommPinboardAPI.Entities.Post", b =>
                {
                    b.HasOne("CommPinboardAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserExternalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
